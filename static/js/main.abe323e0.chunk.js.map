{"version":3,"sources":["audio.m4a","App.js","serviceWorker.js","index.js"],"names":["module","exports","meter","DecibelMeter","audio","Audio","magicSentence","App","useState","listening","setListening","count","setCount","useEffect","listenTo","dB","play","addEventListener","removeEventListener","toggleMic","useCallback","disconnect","then","sources","connect","catch","err","alert","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,gMCKrCC,G,MAAQ,IAAIC,IAAa,cACzBC,EAAQ,IAAIC,MAAMC,KAkETC,EAhEH,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACTC,EADS,KACEC,EADF,OAEUF,mBAAS,GAFnB,mBAETG,EAFS,KAEFC,EAFE,KAIhBC,qBAAU,WACJJ,GACFP,EAAMY,SAAS,GAAG,SAAAC,GAEZA,GAAM,IAERX,EAAMY,YAIX,CAACP,IAEJI,qBAAU,WAOR,OANAT,EAAMa,iBAAiB,SAAS,WAG9BL,GAAS,SAAAD,GAAK,OAAIA,EAAQ,QAGrB,kBAAMP,EAAMc,oBAAoB,YACtC,IAEH,IAiBMC,EAAYC,uBAAY,WACxBX,EARJP,EAAMmB,aAAaC,MAAK,WAEtBZ,GAAa,GACbE,EAAS,MAZXV,EAAMqB,QACHD,MAAK,SAAAC,GACJrB,EAAMsB,QAAQD,EAAQ,IACtBb,GAAa,MAEde,OAAM,SAAAC,GAAG,OAAIC,MAAM,yBAiBrB,CAAClB,IAEJ,OACE,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAChB,8DACCnB,GAAa,4CAAkBE,EAAlB,kBACd,4BAAQkB,QAASV,GACdV,EAAY,kBAAoB,2BCrDvBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.abe323e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/audio.f79b3b40.m4a\";","import React, { useState, useEffect, useCallback } from \"react\";\nimport DecibelMeter from \"decibel-meter\";\nimport magicSentence from \"./audio.m4a\";\nimport \"./App.css\";\n\nconst meter = new DecibelMeter(\"unique-id\");\nconst audio = new Audio(magicSentence);\n\nconst App = () => {\n  const [listening, setListening] = useState(false);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    if (listening) {\n      meter.listenTo(0, dB => {\n        // 0 represents the index of the first microphone in the sources array\n        if (dB > -65) {\n          // When Blacky barks, we play the pre-recorded voice message\n          audio.play();\n        }\n      });\n    }\n  }, [listening]);\n\n  useEffect(() => {\n    audio.addEventListener(\"ended\", function() {\n      // Once the audio file has finished playing, we increment\n      // the counter to know how many times Blacky barked\n      setCount(count => count + 1);\n    });\n    // Cleanup\n    return () => audio.removeEventListener(\"ended\");\n  }, []);\n\n  const startMic = () => {\n    meter.sources\n      .then(sources => {\n        meter.connect(sources[0]);\n        setListening(true);\n      })\n      .catch(err => alert(\"Connection Error\"));\n  };\n\n  const stopMic = () => {\n    meter.disconnect().then(() => {\n      // Set listening to false and reset counter\n      setListening(false);\n      setCount(0);\n    });\n  };\n\n  const toggleMic = useCallback(() => {\n    if (listening) {\n      stopMic();\n    } else {\n      startMic();\n    }\n  }, [listening]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome to Blacky Silencer App!</p>\n        {listening && <p>Blacky barked {count} times so far.</p>}\n        <button onClick={toggleMic}>\n          {listening ? \"Stop microphone\" : \"Get microphone input\"}\n        </button>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}